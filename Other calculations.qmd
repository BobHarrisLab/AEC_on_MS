---
title: "Other calculations"
format: html
---


## Load library
```{r}
library(CellChat)
library(Seurat)
library(tidyverse)
library(cowplot)
```

## Merge of HG dataset and Brain Immune Cell Data Set

```{r}
DATA <- readRDS("../data/Brain_Cd45/data_Subtypes.rds")
DATA_pro <- readRDS("../data/Brain_progenitor/data_inted.rds")

#DATA_pro$Celltypes <- "High Granularity Cells"
DATA@meta.data$SampleID <- ""
DATA@meta.data[Cells(DATA), "SampleID"] <- paste0("CD45_", DATA$Condition)

DATA_pro@meta.data$SampleID <- ""
DATA_pro@meta.data[Cells(DATA_pro), "SampleID"] <- paste0("HG_", DATA_pro$Condition)

DATA$orig.ident <- "CD45"
DATA_pro$orig.ident <- "HG"

DATA <- merge(DATA, DATA_pro) %>% JoinLayers()
rm(DATA_pro)
new.cluster.ids <-c("B Cells 1",  "B Cells 2", "γδ T Cells 1",   "Th1 Cells",  "γδ T Cells 2", "Th1 Cells",  "Stem-like Cd4 T Cells",      "Cd8 T Cells","Proliferative T Cells",             "Regulatory T Cells",                "Il4 Th2 Cells",         "Th1 Cells", "NK Cells",    "Mast Cells",       "Neutrophil",  "Monocyte 5",  "Macrophage 3",   "Monocyte 1",   "Macrophage 1", "Monocyte 2", "Monocyte 3",      "Monocyte 4","Monocyte 6", "Macrophage 2",  "Homeostatic Microglia","Disease Accoiated Microglia",    "Intermediate  Microglia",  "IFN responsive  Microglia", "Reactive Microglia", "Proliferative Microglia",  "Dendritic Cells",       "HG_1",  "HG_2", "HG_3",  "HG_4", "HG_5")

unique(DATA$Subtypes)

DATA <- SetIdent(DATA, value = "Subtypes")
names(new.cluster.ids) <- unique(DATA$Subtypes)
DATA <- RenameIdents(DATA,new.cluster.ids)
DATA@active.ident <- factor(DATA@active.ident, 
                           levels = c("B Cells 1", "B Cells 2", "γδ T Cells 1","γδ T Cells 2", "Th1 Cells",  "Stem-like Cd4 T Cells",  "Proliferative T Cells", "Il4 Th2 Cells",  "Cd8 T Cells", "Regulatory T Cells","NK Cells", "Mast Cells", "Neutrophil", "Dendritic Cells","Monocyte 1", "Monocyte 2", "Monocyte 3", "Monocyte 4","Monocyte 5", "Monocyte 6", "Macrophage 1", "Macrophage 2","Macrophage 3", "Homeostatic Microglia", "Intermediate  Microglia", "Disease Accoiated Microglia", "IFN responsive  Microglia", "Reactive Microglia", "Proliferative Microglia",  "HG_1", "HG_2", "HG_3", "HG_4", "HG_5") )

DATA$Subtypes2 <- DATA@active.ident
```

```{r}
DefaultAssay(DATA) <- "RNA"
DATA <- JoinLayers(DATA)
table(DATA$Celltypes,DATA$Subtypes)

DATA[['RNA']] <- split(DATA[['RNA']], f = DATA$Condition)

DATA <- NormalizeData(DATA)
DATA <- FindVariableFeatures(DATA)
VariableFeatures(DATA) = SelectIntegrationFeatures5(DATA, nfeatures = 3000)
DATA <- ScaleData(DATA,vars.to.regress = c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo", "percent_hb","percent_plat","S.Score","G2M.Score"))

#DATA <- SCTransform(DATA,vars.to.regress = c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo", "percent_hb","percent_plat","S.Score","G2M.Score") )


DATA <- RunPCA(DATA,npcs = 50)

#unintegrated
#DATA <- FindNeighbors(DATA, dims = 1:30, reduction = "pca")
DATA <- RunUMAP(DATA, dims = 1:50, reduction = "pca", reduction.name = "umap.unintegrated")
p1<-DimPlot(DATA, reduction = "umap.unintegrated",shuffle = T,label = T)+ggtitle("unintegrated")+NoLegend()
#CCA
#DATA <- IntegrateLayers(
#  object = DATA, method = CCAIntegration,
#  orig.reduction = "pca", new.reduction = "integrated.cca"
#)
#DATA <- FindNeighbors(DATA, reduction = "integrated.cca", dims = 1:30)
#DATA <- RunUMAP(DATA, reduction = "integrated.cca", dims = 1:50, reduction.name = "umap.cca")

#Harmony
DATA <- IntegrateLayers(
  object = DATA, method = HarmonyIntegration,
  orig.reduction = "pca", new.reduction = "harmony"
)
#DATA <- FindNeighbors(DATA, reduction = "harmony", dims = 1:30)
DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:40, reduction.name = "umap.harmony")
DimPlot(DATA,group.by = "Subtypes2", reduction = "umap.harmony", shuffle = T,label = T)+ggtitle("Harmony")

```

Top5 Genes
```{r}
DATA <- SetIdent(DATA, value = "Celltypes")

DefaultAssay(DATA) <-  "RNA"
detable_all <- FindAllMarkers(DATA, log2FC.threshold = 0.2, 
    min.pct = 0.1, min.diff.pct = 0.2, only.pos = TRUE, max.cells.per.ident = Inf,
    assay = "RNA")

detable_all <- detable_all[ detable_all$p_val < 0.05,  ]
  detable_all$pct.diff <- detable_all$pct.1 - detable_all$pct.2
  detable_all$log.pct.diff <- log2(detable_all$pct.1 / (detable_all$pct.2+0.01) )

detable_all %>% group_by(cluster)  %>% top_n(-20, p_val) %>% top_n(5, log.pct.diff) -> top5
plot_dots(DATA,genes = unique(top5$gene), clustering = "Celltypes",pal = c("#cfc8d7","#a577f2", "#0434ff"),cex.row = 0.6)

DATA@active.ident <- factor(DATA@active.ident, 
                            levels=c("B Cells", 
                                     "T Cells",
                                     "NK Cells", 
                                     "Mast Cells",
                                     "Neutrophil", 
                                     "Monocytes", 
                                     "Macrophages", 
                                     "Microglia", 
                                     "Dendritic Cells", 
                                     "High Granularity Cells"))
pdf("../Brain_Cd45_HG/Celltypes_Marker.pdf", width = 7, height = 9)
DotPlot(DATA, features = rev(unique(top5$gene))) + coord_flip()+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
dev.off()

pdf("../Brain_Cd45_HG/Celltypes_Marker_H.pdf", width = 13, height = 5)
DotPlot(DATA, features = rev(unique(top5$gene))) +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
dev.off()

```


```{r Proportions}
summarized.df <- DATA@meta.data %>%
  group_by(Condition, Celltypes) %>% # In you case you should group by "day" and "Clusters"
  summarize(nCells = n()) %>%
  group_by(Condition) %>% # This should be changed for "day"
  mutate(prop = nCells/sum(nCells))



pdf("../Proportion_Cd45_H.pdf", width = 13, height = 5)
ggplot() +
  geom_bar(data = summarized.df, aes(Condition, prop, fill = Celltypes), stat = "identity", color = "black") +
  scale_fill_manual(values =  c("#00BFC4", "#D89000", "#06D6A0", "#073B4C","#E63946" , "#9590FF", "#E76BF3", "#FF62BC","#39B600"))+
  theme_classic() +
  scale_y_continuous(labels = scales::percent) + coord_flip()
dev.off()

pdf("../Proportion_Cd45.pdf", width = 5, height = 13)
ggplot() +
  geom_bar(data = summarized.df, aes(Condition, prop, fill = Celltypes), stat = "identity", color = "black") +
  scale_fill_manual(values =  c("#00BFC4", "#D89000", "#06D6A0", "#073B4C","#E63946" , "#9590FF", "#E76BF3", "#FF62BC","#39B600"))+
  theme_classic() +
  scale_y_continuous(labels = scales::percent) 
dev.off()

library(geomtextpath)
AEC_Celltypes = summarized.df[summarized.df$Condition == "AEC",]
PBS_Celltypes = summarized.df[summarized.df$Condition == "PBS",]

AEC_Celltypes$fraction <- AEC_Celltypes$prop
AEC_Celltypes = AEC_Celltypes %>%  mutate(percentage = round(fraction,3)*100)

PBS_Celltypes = PBS_Celltypes %>%  mutate(percentage = round(prop,3)*100)


pdf("../Proportion_Cd45_Circle.pdf", width = 6, height = 5)
ggplot(data = PBS_Celltypes, 
       aes(x = 2, y = percentage, fill = Celltypes))+
  geom_bar(stat = "identity", color = "black")+
  scale_fill_manual(values =  c("#00BFC4", "#D89000", "#06D6A0", "#073B4C","#E63946" , "#9590FF", "#E76BF3", "#FF62BC","#39B600"))+
  coord_polar("y", start = 200) +
  #geom_text(aes(y = lab.pos, label = paste0(percentage,"%", sep = "")), col = "white") +
  geom_textpath(position = position_stack(vjust = 0.5), angle = 90, size =3.5, col="white", aes( label= paste0(percentage,"%", sep = "")))+
  theme_void() +
  ggtitle("PBS")+
  #scale_fill_brewer(palette = "Dark2")+
  xlim(.2,2.5)

ggplot(data = AEC_Celltypes, 
       aes(x = 2, y = percentage, fill = Celltypes))+
  geom_bar(stat = "identity", color = "black")+
  scale_fill_manual(values =  c("#00BFC4", "#D89000", "#06D6A0", "#073B4C","#E63946" , "#9590FF", "#E76BF3", "#FF62BC","#39B600"))+
  coord_polar("y", start = 200) +
  #geom_text(aes(y = lab.pos, label = paste0(percentage,"%", sep = "")), col = "white") +
  geom_textpath(position = position_stack(vjust = 0.5), angle = 90, size =3.5, col="white", aes( label= paste0(percentage,"%", sep = "")))+
  theme_void() +
  ggtitle("AEC")+
  #scale_fill_brewer(palette = "Dark2")+
  xlim(.2,2.5)
dev.off()


```

## Slingshot
Cluster was selected based on its identities and relavance to the project

```{r}
DATA <- SetIdent(DATA, value = "Subtypes2") %>% subset(idents = c( "Monocyte 3", "Monocyte 4", "Monocyte 5", "Monocyte 6", "Macrophage 2","HG_3", "Macrophage 1", "Monocyte 1", "Monocyte 2"))  #c("Monocyte 5","Macrophage 1", "Monocyte 3", "Monocyte 4", "Monocyte 6",    "Macrophage 2", "HG_3", "Monocyte 1", "Monocyte 2")) # "Macrophage 3"  , "Monocyte 1", "Monocyte 2"
                                                        
#c("Monocyte 3", "Monocyte 4", "Monocyte 5", "Monocyte 6", "Macrophage 2","HG_3", "Macrophage 1")) #"Monocyte 1", "Monocyte 2",
DefaultAssay(DATA )<- "RNA"
DATA <- JoinLayers(DATA)

```

```{r}
# Redo Umap----

DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:40, reduction.name = "umap.harmony", n.components = 2)
DimPlot(DATA, reduction = "umap.harmony", group.by = "Subtypes", label = T)

DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:30, reduction.name = "umap.harmony.30", n.components = 2)
DimPlot(DATA, reduction = "umap.harmony.30", group.by = "Subtypes", label = T)

DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:50, reduction.name = "umap.harmony.50", n.components = 2)
DimPlot(DATA, reduction = "umap.harmony.50", group.by = "Subtypes", label = T)

DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:25, reduction.name = "umap.harmony.25", n.components = 2)
DimPlot(DATA, reduction = "umap.harmony.25", group.by = "Subtypes", label = T)

plot_grid(
DimPlot(DATA, reduction = "umap.harmony.50", group.by = "Subtypes", label = T),
DimPlot(DATA, reduction = "umap.harmony.30", group.by = "Subtypes", label = T),
DimPlot(DATA, reduction = "umap.harmony", group.by = "Subtypes", label = T),
DimPlot(DATA, reduction = "umap.harmony.25", group.by = "Subtypes", label = T)
)
```


```{r re-do the umap}
DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:50, reduction.name = "umap.harmony", n.components = 2)
DimPlot(DATA, reduction = "umap.harmony.50", group.by = "Subtypes", label = T)
```
Check 3d UMAP

```{r}

DATA <- RunUMAP(DATA, dims = 1:50, #50
                reduction = "harmony",
                reduction.name = "umap_traj_3d",
                min.dist = 0.01, #0.01
                #spread = .3,# .3
                #metric = "euclidean",
                n.neighbors = 20, #10
                repulsion.strength = 0.05, #0.05
                negative.sample.rate = 20, #20
                n.epochs = 100, #100
                n.components = 3 )

DATA <- RunUMAP(DATA, reduction = "harmony", dims = 1:50, reduction.name = "umap_traj_3d", n.components = 3)
DimPlot(DATA, reduction = "umap_traj", group.by = "Subtypes", label = T)

df <- data.frame(DATA@reductions$umap_traj_3d@cell.embeddings, variable = factor(DATA$Subtypes))
colnames(df)[1:3] <- c("UMAP_1", "UMAP_2", "UMAP_3")
p_State <- plot_ly(df, x = ~UMAP_1, y = ~UMAP_2, z = ~UMAP_3, color = ~variable, size = 0.5)
try(htmlwidgets::saveWidget(p_State, selfcontained = T, "umap_3d_clustering_plotly.html"),
    silent = T)
browseURL("umap_3d_clustering_plotly.html")
```

```{r Get Lineage}
#Give subtypes numbers to visualize 
DATA$Subtypes <- DATA$Subtypes2
new.cluster.ids <- 0:8
DATA <- SetIdent(DATA, value = "Subtypes")
names(new.cluster.ids) <- unique(DATA$Subtypes)
DATA <- RenameIdents(DATA,new.cluster.ids)
DATA$Subtypes2 <- DATA@active.ident
```


```{r}
mm <- sparse.model.matrix(~0 + factor(DATA$Subtypes))
colnames(mm) <- levels(factor(DATA$Subtypes))
centroids2d <- as.matrix(t(t(DATA@reductions$umap_traj@cell.embeddings) %*% mm)/Matrix::colSums(mm))

#Trajectory imputation----
set.seed(1)
lineages <- as.SlingshotDataSet(getLineages(
  data           = DATA@reductions$umap_traj_3d@cell.embeddings,
  clusterLabels  = DATA$Subtypes,
  #dist.method    = "mnn",       # It can be: "simple", "scaled.full", "scaled.diag", "slingshot" or "mnn"
  end.clus       = c("Monocyte 3"),       #Define the lineage end
  start.clus     = "Monocyte 2"
  )) 
lineages
```

```{r Plot Lineage}
#Plot Lineage

lineages@reducedDim <- DATA@reductions$umap_traj@cell.embeddings

plot(DATA@reductions$umap_traj@cell.embeddings, col =  c((scales::hue_pal())(8),RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8,"Set2"))[DATA$Subtypes2],  cex=.5,pch = 16)
lines(lineages, lwd = 1, col = 'black', cex=1 )
text(centroids2d, labels = rownames(centroids2d),cex=0.8,font=2,col = "black")


```

```{r Principal Curve}
curves <- as.SlingshotDataSet(getCurves(data = lineages, thresh = 0.01, stretch = 0.1, allow.breaks = F, approx_points = 1000))
# Plots
plot(DATA@reductions$umap_traj@cell.embeddings, col = c((scales::hue_pal())(8), RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8,"Set2"))[DATA$Subtypes2], pch = 16)
lines(curves, lwd = 2, col = "black")
text(centroids2d, labels = rownames(centroids2d), cex = 1, font = 2)

```

### Pesudotime
```{r}
#Compute pseudotime----
pseudotime <- slingPseudotime(curves, na = FALSE)

pseu <- as.data.frame(pseudotime)
DATA2 <- AddMetaData(DATA, pseu$Lineage1, col.name = "Slingshot_1") 
DATA2 <- AddMetaData(DATA2, pseu$Lineage2, col.name = "Slingshot_2") 
DATA2 <- AddMetaData(DATA2, pseu$Lineage3, col.name = "Slingshot_3") 
DATA2 <- AddMetaData(DATA2, pseu$Lineage4, col.name = "Slingshot_4") 
DATA2 <- AddMetaData(DATA2, pseu$Lineage5, col.name = "Slingshot_5") 


pdf("../Brain_Cd45_HG/Trajectory_new/Slinsghot_Vln.pdf", width = 8, height = 4.9 )
VlnPlot(DATA2, features = c("Slingshot_1"), group.by = "Condition")+ggtitle("Mono2-Mono4-Mac1")
VlnPlot(DATA2, features = c("Slingshot_2"), group.by = "Condition")+ggtitle("Mono2-Mono6-Mac2")
VlnPlot(DATA2, features = c("Slingshot_3"), group.by = "Condition")+ggtitle("Mono2-Mono1-HG_3")
VlnPlot(DATA2, features = c("Slingshot_4"), group.by = "Condition")+ggtitle("Mono2-Mono5")
VlnPlot(DATA2, features = c("Slingshot_5"), group.by = "Condition")+ggtitle("Mono2-Mono3")
dev.off()
```

Boxplot to compare pesudotime 
```{r}
pseu2 <- DATA2@meta.data[c("Slingshot_1","Slingshot_2","Slingshot_3","Slingshot_4","Slingshot_5", "Condition", "Subtypes")]


pdf("../Trajectory_new/Slinsghot_Box.pdf", width = 8, height = 3 )
pseu2 %>%
  ggplot( aes(x=Condition, y=Slingshot_1, color = Condition)) +
    #scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(aes(fill = Subtypes),stroke =0.5, color = "black",shape = 21,  size=3, alpha=0.9) +
  geom_boxplot( outliers = F, alpha = 0 )+
   scale_fill_manual("Cell Subtypes", values = c("Monocyte 1"="#C5D04E",   "Monocyte 2" =  "#E5B822" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100", "NA"= NA))+
    scale_color_manual("Conditions", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100"))+
    theme_classic() +
    theme(
      #legend.position="none",
      plot.title = element_text(size=11)
    ) +
  coord_flip()+
    ggtitle("Trajectory 1") +
    ylab("Monocyte 2 ← pseudotime → Macrophage 1")+
    labs(color = "Cell Subtypes")

pseu2 %>%
  ggplot( aes(x=Condition, y=Slingshot_2, color = Condition)) +
    #scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(aes(fill = Subtypes),stroke =0.5, color = "black",shape = 21,  size=3, alpha=0.9) +
  geom_boxplot( outliers = F, alpha = 0 )+
   scale_fill_manual("Cell Subtypes", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100", "NA"= NA))+
    scale_color_manual("Conditions", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100"))+
    theme_classic() +
    theme(
      #legend.position="none",
      plot.title = element_text(size=11)
    ) +
  coord_flip()+
    ggtitle("Trajectory 2") +
    ylab("Monocyte 2 ← pseudotime → Macrophage 2")+
    labs(color = "Cell Subtypes")

pseu2 %>%
  ggplot( aes(x=Condition, y=Slingshot_3, color = Condition)) +
    #scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(aes(fill = Subtypes),stroke =0.5, color = "black",shape = 21,  size=3, alpha=0.9) +
  geom_boxplot( outliers = F, alpha = 0 )+
   scale_fill_manual("Cell Subtypes", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100", "NA"= NA))+
    scale_color_manual("Conditions", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100"))+
    theme_classic() +
    theme(
      #legend.position="none",
      plot.title = element_text(size=11)
    ) +
  coord_flip()+
    ggtitle("Trajectory 3") +
    ylab("Monocyte 2 ← pseudotime → HG_3")+
    labs(color = "Cell Subtypes")

pseu2 %>%
  ggplot( aes(x=Condition, y=Slingshot_4, color = Condition)) +
    #scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(aes(fill = Subtypes),stroke =0.5, color = "black",shape = 21,  size=3, alpha=0.9) +
  geom_boxplot( outliers = F, alpha = 0 )+
   scale_fill_manual("Cell Subtypes", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100", "NA"= NA))+
    scale_color_manual("Conditions", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100"))+
    theme_classic() +
    theme(
      #legend.position="none",
      plot.title = element_text(size=11)
    ) +
  coord_flip()+
    ggtitle("Trajectory 4") +
    ylab("Monocyte 2 ← pseudotime → Monocyte 5")+
    labs(color = "Cell Subtypes")

pseu2 %>%
  ggplot( aes(x=Condition, y=Slingshot_5, color = Condition)) +
    #scale_fill_viridis(discrete = TRUE, alpha=0.6) +
    geom_jitter(aes(fill = Subtypes),stroke =0.5, color = "black",shape = 21,  size=3, alpha=0.9) +
  geom_boxplot( outliers = F, alpha = 0 )+
   scale_fill_manual("Cell Subtypes", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100", "NA"= NA))+
    scale_color_manual("Conditions", values = c("Monocyte 1"="#C6D04E",   "Monocyte 2" =  "#E6B815" ,    "Monocyte 3"=  "#F79F83", "Monocyte 4" ="#EF5990",  "Monocyte 5" ="#CE1D75",  "Monocyte 6" = "#910241", "Macrophage 1"= "#2992A7", "Macrophage 2" = "#47CDD8" , "Macrophage 3"= "#ABB3D0", "HG_3" = "#AEDFC1", "PBS" = "navy", "AEC" = "#FC4100"))+
    theme_classic() +
    theme(
      #legend.position="none",
      plot.title = element_text(size=11)
    ) +
  coord_flip()+
    ggtitle("Trajectory 4") +
    ylab("Monocyte 2 ← pseudotime → Monocyte 3")+
    labs(color = "Cell Subtypes")
dev.off()
```

###TradeSeq

Due to the computation limitation, i performed trade Seq on HPC, (Rackham from UPPMAX)

At first we need to make a SCE object 
```{r}
sce <- as.SingleCellExperiment(DATA2, assay = "RNA")

table(sce$Condition)

sce <- slingshot(sce, reducedDim = 'umap_traj_3d', clusterLabels = sce$Subtypes,
                 start.clus = 'Monocyte 3', approx_points = 150)
```

```{r}

sceGAM <- fitGAM(counts = drop0(count
  #DATA@assays$RNA@data[sel_genes, sel_cells]
  ), pseudotime = pseudotime
  #[sel_cells,]
  , cellWeights = cellWeights,
  #condition = factor(condition$Condition),
  #[sel_cells, ]
   ,nknots = 5, verbose = T, parallel = T,
    sce = TRUE, BPPARAM = BiocParallel::MulticoreParam())
```


```{r}
plotGeneCount(curves, clusters = DATA$Subtypes, models = sceGAM)
```


#### Early drivers Detection
```{r}
earlyDERes <- earlyDETest(sce, knots = c(1, 2))

oEarly <- order(earlyDERes$waldStat, decreasing = TRUE)
head(rownames(earlyDERes)[oEarly])

plotSmoothers(sce, counts, gene = rownames(earlyDERes)[oEarly][8]) + ggtitle( rownames(earlyDERes)[oEarly][8])

write.csv(earlyDERes, file = "../Results/Brain_Cd45_HG/Trajectory/Early_driver_DE.csv")

```

#### DEG between lineages
```{r}
patternRes <- patternTest(sce)
oPat <- order(patternRes$waldStat, decreasing = TRUE)
head(rownames(patternRes)[oPat])

write.csv(patternRes, file = "../Results/Brain_Cd45_HG/Trajectory/Lineages_DE.csv")
```
```{r}
#Associated Gene with pseudotime and find lineage specific marker
assoRes <- associationTest(sceGAM)
startRes <- startVsEndTest(sceGAM)
oStart <- order(startRes$waldStat, decreasing = TRUE)

lc <- sapply(lineages@lineages, function(x) {
    rev(x)[1]
})
names(lc) <- gsub("Lineage", "", names(lc))

mypar()
plot(DATA@reductions$umap_traj@cell.embeddings, col =c((scales::hue_pal())(8), RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8,"Set2"))[DATA$Subtypes2], pch = 16)
lines(curves, lwd = 2, col = "black")
points(centroids2d[lc, ], col = "black", pch = 16, cex = 3)
text(centroids2d[lc, ], labels = names(lc), cex = 1, font = 2, col = "white")

#Save the psudotime association Genelist
res <- na.omit(associationTest(sceGAM, contrastType = "consecutive"))
res <- res[res$pvalue < 0.005, ]
res <- res[res$waldStat > mean(res$waldStat), ]
res <- res[order(res$waldStat, decreasing = T), ]
res$gene <- rownames(res)
write_csv(res, "../AECs/Results/cell/Myeloid_new/Trajectory/Psudo_Gene.csv")

#Save the gene list between two psudotime point
res <- na.omit(startVsEndTest(sceGAM, pseudotimeValues = c(2.5, 6.25), lineages = T))
res <- res[res$pvalue_lineage2 < 0.05, ]
res <- res[res$waldStat > mean(res$waldStat), ]
res <- res[order(res$waldStat, decreasing = T), ]
res$gene <- rownames(res)
write_csv(res, "../Trajectory/2.5_6.25_DE.csv")
res_lin2 <- sort(setNames(res$logFClineage2, rownames(res)))

#Genes that are different between lineages
res <- na.omit(diffEndTest(sceGAM))
res <- res[res$pvalue < 0.001, ]
res <- res[res$waldStat > mean(res$waldStat), ]
res <- res[order(res$waldStat, decreasing = T), ]
res$gene <- rownames(res)

counts <- DATA@assays$RNA@layers$data
rownames(counts) <- rownames(DATA)
colnames(counts) <- colnames(DATA)

#Plot Top12 Genes
plot_list = list()
for (i in 1:7){ 
#sigGeneStart <- names(sceGAM)[oStart[1:20]]
  sigGeneStart <- res$gene[i]
  #sigGeneStart <- names(rev(res_lin2))[i]#Top12
  #sigGeneStart <- names(res_lin2)[i]#bot12
  #sigGeneStar <- c("Cst7", "Cstb", "Tspo", "Cd69", "Aif1", "Ly6a", "Cd63", "Fcer1g", "H2az1", "Fcgr4", "Hmgb1", "Ccl12", "Ccl5", "B2m", "Cct7", "Ly6e", "Cst3", "Cd72", "Ccl2", "Ccl3")
  #sigGeneStar <-c("H2-Aa",   "H2-Ab1",  "H2-DMa",  "H2-DMb1","H2-Eb1"  ,"Cd74", "Cd274")
#sigGeneStart <- sigGeneStart[i]
print(sigGeneStart)
plot_list[[sigGeneStart]]<- plotSmoothers(sceGAM, counts=drop0(counts), gene = sigGeneStart) + ggtitle(sigGeneStart)
}
plot_grid(ncol = 2, plotlist = plot_list)

VlnPlot(DATA,features = MHC2)

plot_list <- list()

for (i in myfeatures) {
    plot_list[[i]] <- FeaturePlot(DATA,  reduction = "umap", dims = 1:2, features = i,
         order = T) + NoAxes() + NoGrid()
}

plot(DATA@reductions$umap@cell.embeddings, col =c((scales::hue_pal())(8), RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8,"Set2"))[DATA$seurat_subclusters], pch = 16)
lines(curves, lwd = 2, col = "black")
points(centroids2d[lc, ], col = "black", pch = 16, cex = 3)
text(centroids2d[lc, ], labels = names(lc), cex = 1, font = 2, col = "white")

a <- as.data.frame(DATA@reductions$umap@cell.embeddings)
b<- as.data.frame(pseudotime)
b<- as.data.frame(apply(b,1,max,na.rm=TRUE))
c<- merge(a,b,by = "row.names", sort=F)

c$a<-c$`apply(b, 1, max, na.rm = TRUE)`
plot_ly(c, x=~umap_1, y = ~umap_2, color = c((scales::hue_pal())(8), RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8,"Set2"))[DATA$seurat_subclusters],type = "scatter",mode = "markers",text=~a)

plotGeneCount(curves, counts=drop0(DATA@assays$RNA@data[sel_genes, sel_cells]), gene = sigGeneStart) + ggtitle(sigGeneStart)


```



```{r}
oo <- order(condRes$waldStat, decreasing = TRUE)

plotSmoothers(sce, assays(sce)$counts,
              gene = rownames(assays(sce)$counts)[oo[1]],
              alpha = 1, border = TRUE)

plot_list = list()
for(i in c("Adgre4", "Saa3","Tfec" , "Ccl24", "Hmgb2", "Alox15")){
plot_list[[i]] = plotSmoothers(sce, assays(sce)$counts,
              gene = i,
              alpha = 1,curvesCols = c("#440154","#297093","#F15A29","#EFD137","#8D0A17"), border = TRUE) + ggtitle(i) + scale_color_manual (values = c("#440154","#297093","#F15A29","#EFD137","#8D0A17"))
}


plot_grid(plotlist = plot_list)


 pdf("../Brain_Cd45_HG/Trajectory_new/Traj_genes.pdf", width = 12, height = 5)
plot_grid(plotlist =  plot_list)
dev.off()

plot_list = list()
for(i in c("Mrc1", "Arg1", "Pdcd1lg2")){
plot_list[[i]] = plotSmoothers(sce, assays(sce)$counts,
              gene = i,
              alpha = 1,curvesCols = c("#440154","#297093","#F15A29","#EFD137","#8D0A17"), border = TRUE) + ggtitle(i) + scale_color_manual (values = c("#440154","#297093","#F15A29","#EFD137","#8D0A17"))
}


plot_grid(plotlist = plot_list)

pdf("../Results/Brain_Cd45_HG/Trajectory_new/Arg1_Mrc1_Pdcd1.pdf", width = 8, height = 5)
plot_grid(plotlist =  plot_list, ncol = 2)
dev.off()

plotSmoothers(sce, assays(sce)$counts,
              gene = "Plac8",
              alpha = 1, border = TRUE) 

```


## Cell Chat
```{r}
#DATA <- readRDS("~/Library/CloudStorage/OneDrive-KarolinskaInstitutet/result/AECs/data/Cd45_HG.rds")
DATA <- JoinLayers(DATA)

DATA

DATA_PBS <-SetIdent(DATA, value = "Condition") %>% subset(idents = "PBS")
DATA_PBS <- NormalizeData(DATA_PBS)
DATA_AEC <-SetIdent(DATA, value = "Condition") %>% subset(idents = "AEC")
DATA_AEC <- NormalizeData(DATA_AEC)

levels(DATA_AEC)
#Set the database to be used----

#showDatabaseCategory(CellChatDB)
# use all CellChatDB for cell-cell communication analysis
CellChatDB.use <- CellChatDB.mouse# simply use the default CellChatDB

#Make CellChat object from Seurat from two different condition and merge them----



data.input.AEC <- LayerData(DATA_AEC, assay = "RNA", layer  = "data") # normalized data matrix
labels.AEC <-SetIdent(DATA_AEC, value = "Subtypes2") %>% Idents()
meta.AEC <- data.frame(group = labels.AEC, row.names = names(labels.AEC)) # create a dataframe of the cell labels
cellchat_AEC <- createCellChat(object = data.input.AEC, meta = meta.AEC, group.by = "group")



data.input.PBS <- LayerData(DATA_PBS, assay = "RNA", layer  = "data") # normalized data matrix
labels.PBS <-SetIdent(DATA_PBS, value = "Subtypes2") %>% Idents() #%>% factor(levels =  levels(labels.AEC))
meta.PBS <- data.frame(group = labels.PBS, row.names = names(labels.PBS)) # create a dataframe of the cell labels
cellchat_PBS <- createCellChat(object = data.input.PBS, meta = meta.PBS, group.by = "group")
#cellchat_PBS@meta$group = factor(cellchat_PBS@meta$group, levels = label.levels)
#cellchat_PBS@idents = factor(cellchat_PBS@idents, levels = label.levels)


# set the used database in the object
cellchat_AEC@DB <- CellChatDB.use
# subset the expression data of signaling genes for saving computation cost
cellchat_AEC <- subsetData(cellchat_AEC) # This step is necessary even if using the whole database
cellchat_AEC <- identifyOverExpressedGenes(cellchat_AEC)
cellchat_AEC <- identifyOverExpressedInteractions(cellchat_AEC)
cellchat_AEC <- computeCommunProb(cellchat_AEC)
cellchat_AEC <- filterCommunication(cellchat_AEC, min.cells = 10)
cellchat_AEC <- computeCommunProbPathway(cellchat_AEC)
cellchat_AEC <- netAnalysis_computeCentrality(cellchat_AEC)
cellchat_AEC <- aggregateNet(cellchat_AEC)



#groupSize <- as.numeric(table(cellchat_AEC@idents))

#mat <- cellchat_AEC@net$weight

#PBS group----
cellchat_PBS@DB <- CellChatDB.use
cellchat_PBS <- subsetData(cellchat_PBS) # This step is necessary even if using the whole database
cellchat_PBS <- identifyOverExpressedGenes(cellchat_PBS)
cellchat_PBS <- identifyOverExpressedInteractions(cellchat_PBS)
cellchat_PBS <- computeCommunProb(cellchat_PBS)
cellchat_PBS <- filterCommunication(cellchat_PBS, min.cells = 10)
cellchat_PBS <- computeCommunProbPathway(cellchat_PBS)
cellchat_PBS<- netAnalysis_computeCentrality(cellchat_PBS)
cellchat_PBS <- aggregateNet(cellchat_PBS)
groupSize <- as.numeric(table(cellchat_PBS@idents))

label.levels = levels(labels.AEC)
subtypes <- factor(unique(cellchat_PBS@idents), levels =  levels(DATA$Subtypes2))
cellchat_PBS@meta$group = factor(cellchat_PBS@meta$group, levels = label.levels)
cellchat_PBS@idents = factor(cellchat_PBS@idents, levels = label.levels)

object.list <- list(PBS = cellchat_PBS,AEC = cellchat_AEC)
cellchat <- mergeCellChat(object.list, add.names = names(object.list))
cellchat<- netAnalysis_computeCentrality(cellchat)



#Compare the total number of interactions and interaction strength----
gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")

pdf(file = "../cellchat/number.pdf", width = 6, height =3 )
gg1 + gg2
dev.off()


#The differential number of interactions or interaction strength in the cell-cell communication network between two datasets can be visualized using circle plot, where red (or blue) colored edges represent increased (or decreased) signaling in the second dataset compared to the first one.
#Here is AEC compared to PBS
pdf(file = "../cellchat/interaction_change.pdf", width = 20, height =12)
#par(mfrow = c(1,2), xpd= T)
netVisual_diffInteraction(cellchat, weight.scale = T, top = 0.2)
netVisual_diffInteraction(cellchat, weight.scale = T, measure = "weight", top = 0.2)
dev.off()

```
```{r}


#Compare the major sources and targets in 2D figure
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg <- list()

for (i in 1:length(object.list)) {
  gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax)
}

pdf(file = "../cellchat/Source_Target.pdf", width = 15, height =7)
patchwork::wrap_plots(plots = gg)
dev.off()

pdf(file = "../cellchat/Condition.pdf", width = 8, height =4.8)
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Microglia 1")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Microglia 2")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Microglia 3")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Microglia 4")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Microglia 5")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Microglia 6")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Monocyte 1")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Monocyte 2")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Monocyte 3")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Monocyte 4")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Monocyte 5")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Monocyte 6")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Macrophage 1")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Macrophage 2")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Macrophage 3")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Cd8 T Cells")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "HG_1")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "HG_2")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "HG_3")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "HG_4")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "HG_5")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Regulatory T Cells")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Th1 Cells")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Il4 Producing Cd4 T Cells")
netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Gata3 Cd4 T Cells")
dev.off()



gg1 <- netVisual_heatmap(cellchat, color.heatmap = c(blu = "royalblue", reddish = "darkred"))
#> Do heatmap based on a merged object
gg2 <- netVisual_heatmap(cellchat, measure = "weight",color.heatmap = c(blu = "royalblue", reddish = "darkred"))
#> Do heatmap based on a merged object
pdf(file = "../cellchat/Number_Strength_heatmap_PBS_AEC.pdf", width = 15, height =7)
gg1+gg2
dev.off()


View(cellchat@meta)

#for (source in  as.character(levels(cellchat@idents$joint)[!levels(cellchat@idents$joint) %in% c("B Cells 1" , "Th2 Cells")])){
  
print(paste0("\t","Current Celltype is ", source,"\n" ))
  
  source =  "HG_4"   
  
  
#  "B Cells 3"          "B Cells 4"          "B Cells 2"          "Th1 Cells"          "γδ T Cells 3"       "Cd4 T Cells"       "Regulatory T Cells" "γδ T Cells 1"       "γδ T Cells 2"       "Cd8 T Cells"        "NK Cells"           "MG1"               "Mono2"              "MG3"                "MΦ1"                "Mono1"              "MG2"                "MΦ2"                "MG5"                "Mono3"              "MG4"                "MΦ3"                "Neutrophil"         "Mast Cells"        "HG_2"               "HG_1"               "HG_3"               "HG_4"     

gg1 <- netVisual_bubble(cellchat, sources.use = source, targets.use = c(1:30),  comparison = c(1,2), max.dataset = 2, title.name = "Increased signaling in AEC", angle.x = 45, remove.isolate = T)
#> Comparing communications on a merged object
gg2 <- netVisual_bubble(cellchat, sources.use = source, targets.use = c(1:30),  comparison = c(1, 2), max.dataset = 1, title.name = "Decreased signaling in AEC", angle.x = 45, remove.isolate = T)
#> Comparing communications on a merged object


pdf(file = paste0("../cellchat/",source,"_Condition.pdf"), width = 15, height =10)
gg1
gg2
dev.off()

pdf(file = paste0("../cellchat/HG_3_circle_Condition.pdf"),width = 30, height =20)
#par(mfrow = c(1, 2), xpd=TRUE)
# compare all the interactions sending from Inflam.FIB to DC cells
for (i in 1:length(object.list)) {
  netVisual_chord_gene(object.list[[i]], sources.use = "HG_3",slot.name = "netP", targets.use = c(1:36), lab.cex = 0.7, transparency = 0.1,title.name = paste0("Signaling from HG_3 - ", names(object.list)[i]))
}
dev.off()


pdf(file = paste0("../cellchat/HG_2_circle_Condition.pdf"),width = 30, height =20)
#par(mfrow = c(1, 2), xpd=TRUE)
# compare all the interactions sending from Inflam.FIB to DC cells
i = 2
  netVisual_chord_gene(object.list[[i]], sources.use = "HG_2",slot.name = "netP", targets.use = c(1:36), lab.cex = 0.7, transparency = 0.1,title.name = paste0("Signaling from HG_2 - ", names(object.list)[i]))

dev.off()

pdf(file = paste0("../cellchat/Mono5_circle_Condition.pdf"),width = 30, height =20)
#par(mfrow = c(1, 2), xpd=TRUE)
# compare all the interactions sending from Inflam.FIB to DC cells
for (i in 1:length(object.list)) {
  netVisual_chord_gene(object.list[[i]], sources.use = "Monocyte 5",slot.name = "netP", targets.use = c(1:36), lab.cex = 0.7, transparency = 0.1,title.name = paste0("Signaling from Monocytes 5 - ", names(object.list)[i]))
}
dev.off()



par(mfrow = c(1,2), xpd=TRUE)
netVisual_chord_gene(object.list[[2]], sources.use = 4, targets.use = c(5:11), slot.name = 'net', net = net.up, lab.cex = 0.8, small.gap = 3.5, title.name = paste0("Up-regulated signaling in ", names(object.list)[2]))
netVisual_chord_gene(object.list[[1]], sources.use = 4, targets.use = c(5:11), slot.name = 'net', net = net.down, lab.cex = 0.8, small.gap = 3.5, title.name = paste0("Down-regulated signaling in ", names(object.list)[2]))


#Differential Expression
# define a positive dataset, i.e., the dataset with positive fold change against the other dataset
pos.dataset = "AEC"
# define a char name used for storing the results of differential expression analysis
features.name = paste0(pos.dataset, ".merged")

# perform differential expression analysis 
# Of note, compared to CellChat version < v2, CellChat v2 now performs an ultra-fast Wilcoxon test using the presto package, which gives smaller values of logFC. Thus we here set a smaller value of thresh.fc compared to the original one (thresh.fc = 0.1). Users can also provide a vector and dataframe of customized DEGs by modifying the cellchat@var.features$LS.merged and cellchat@var.features$LS.merged.info. 

cellchat <- identifyOverExpressedGenes(cellchat, group.dataset = "datasets", pos.dataset = pos.dataset, features.name = features.name, only.pos = F, thresh.pc = 0.1, thresh.fc = 0.05,thresh.p = 0.05, group.DE.combined = FALSE) 
#> Use the joint cell labels from the merged CellChat object

# map the results of differential expression analysis onto the inferred cell-cell communications to easily manage/subset the ligand-receptor pairs of interest
net <- netMappingDEG(cellchat, features.name = features.name, variable.all = TRUE)
# extract the ligand-receptor pairs with upregulated ligands in LS
net.up <- subsetCommunication(cellchat, net = net, datasets = "AEC",ligand.logFC = 0.05, receptor.logFC = NULL)
# extract the ligand-receptor pairs with upregulated ligands and upregulated receptors in NL, i.e.,downregulated in LS
net.down <- subsetCommunication(cellchat, net = net, datasets = "PBS",ligand.logFC = -0.05, receptor.logFC = NULL)
#Since the signaling genes in the net.up and net.down might be complex with multi-subunits, we can do further deconvolution to obtain the individual signaling genes.

gene.up <- extractGeneSubsetFromPair(net.up, cellchat)
gene.down <- extractGeneSubsetFromPair(net.down, cellchat)


pdf(file = paste0("../cellchat/Mono5_cd4_th1_Condition.pdf"),width = 15, height =10)

netVisual_chord_gene(object.list[[2]], sources.use = "Monocyte 5", targets.use = c("Cd4 T Cells", "Th1 Cells"),lab.cex = 1, slot.name = 'net', net = net.up, small.gap = 2, title.name = paste0("Up-regulated signaling in ", names(object.list)[2]))

netVisual_chord_gene(object.list[[1]], sources.use = "Monocyte 5", targets.use = c("Cd4 T Cells", "Th1 Cells"), lab.cex = 1,slot.name = 'net', net = net.down,  small.gap = 2, title.name = paste0("Down-regulated signaling in ", names(object.list)[2]))
  

dev.off()



#We then visualize the upgulated and down-regulated signaling ligand-receptor pairs using bubble plot or chord diagram.



pairLR.use.up = net.up[, "interaction_name", drop = F]
gg1 <- netVisual_bubble(cellchat, pairLR.use = pairLR.use.up, sources.use = "HG_1", targets.use = c(1:30), lab.cex= 1,comparison = c(1, 2),  angle.x = 90, remove.isolate = T,title.name = paste0("Up-regulated signaling in ", names(object.list)[2]))
#> Comparing communications on a merged object
pairLR.use.down = net.down[, "interaction_name", drop = F]
gg2 <- netVisual_bubble(cellchat, pairLR.use = pairLR.use.down, sources.use = "HG_1", targets.use = c(1:30), lab.cex= 1,comparison = c(1, 2),  angle.x = 90, remove.isolate = T,title.name = paste0("Down-regulated signaling in ", names(object.list)[2]))
#> Comparing communications on a merged object
gg1 + gg2




#Visualize the upgulated and down-regulated signaling ligand-receptor pairs using Chord diagram

# Chord diagram
par(mfrow = c(1,2), xpd=TRUE)
netVisual_chord_gene(object.list[[2]], sources.use = 4, targets.use = c(5:11), slot.name = 'net', net = net.up, lab.cex = 0.8, small.gap = 3.5, title.name = paste0("Up-regulated signaling in ", names(object.list)[2]))
netVisual_chord_gene(object.list[[1]], sources.use = 4, targets.use = c(5:11), slot.name = 'net', net = net.down, lab.cex = 0.8, small.gap = 3.5, title.name = paste0("Down-regulated signaling in ", names(object.list)[2]))
#> You may try the function `netVisual_chord_cell` for visualizing individual signaling pathway


#Visualize the enriched ligands, signaling,or ligand-receptor pairs in one condition compared to another condition using wordcloud

# visualize the enriched ligands in the first condition



gg1 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "MG2")
#> Visualizing differential outgoing and incoming signaling changes from NL to LS
#> The following `from` values were not present in `x`: 0
#> The following `from` values were not present in `x`: 0, -1
gg2 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Mast Cells")
#> Visualizing differential outgoing and incoming signaling changes from NL to LS
#> The following `from` values were not present in `x`: 0, 2
#> The following `from` values were not present in `x`: 0, -1
patchwork::wrap_plots(plots = list(gg1,gg2))

layout(matrix(c(1,2), 1, 2, byrow = TRUE))



cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional")
#> Compute signaling network similarity for datasets 1 2
cellchat <- netEmbedding(cellchat, type = "functional")
#> Manifold learning of the signaling networks for datasets 1 2
cellchat <- netClustering(cellchat, type = "functional")
#> Classification learning of the signaling networks for datasets 1 2
# Visualization in 2D-space
netVisual_embeddingPairwise(cellchat, type = "functional", label.size = 3.5)
#> 2D visualization of signaling networks from datasets 1 2

#signalling in different condition
# TGFb, OSM, CSF and SPP1
pathways.show <- c("FN1") 
weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show) # control the edge weights across different datasets


#Heatmap
pdf(file = paste0("../cellchat/",pathways.show,"_Condition.pdf"), width = 15, height =8)
par(mfrow = c(1,2), xpd=TRUE)
for (i in 1:length(object.list)) {
  netVisual_aggregate(object.list[[i]], signaling = pathways.show, layout = "circle", edge.weight.max = weight.max[1], edge.width.max = 10, signaling.name = paste(pathways.show, names(object.list)[i]))
}
par(mfrow = c(1,2), xpd=TRUE)
ht <- list()
for (i in 1:length(object.list)) {
  ht[[i]] <- netVisual_heatmap(object.list[[i]], signaling = pathways.show, color.heatmap = "Reds",title.name = paste(pathways.show, "signaling ",names(object.list)[i]))
}

ComplexHeatmap::draw(ht[[1]] + ht[[2]], ht_gap = unit(0.5, "cm"))
dev.off()

pathways.show <- c("MHCII") 
weight.max <- getMaxWeight(cellchat_AEC, slot.name = c("netP"), attribute = pathways.show) # control the edge weights across different datasets

netVisual_heatmap(cellchat_AEC, signaling = pathways.show, color.heatmap = "Reds")


#Heatmap
pdf(file = paste0("../cellchat/",pathways.show,"_AEC.pdf"), width = 15, height =8)
netVisual_aggregate(cellchat_AEC, signaling = pathways.show, layout = "chord")
netVisual_heatmap(cellchat_AEC, signaling = pathways.show, color.heatmap = "Reds")
netVisual_aggregate(cellchat_AEC, signaling = pathways.show, layout = "circle")
dev.off()

for (i in c(1:32, 34:36)) {
  print(subtypes[i])
  gg[[i]] <-netVisual_bubble(cellchat, sources.use = i,   comparison = c(1, 2), angle.x = 45)
}

pdf(file = paste0("../cellchat/","Differentiated_Bubbule.pdf"), width = 15, height =12)
gg
dev.off()

```
```{r Modify the function for the heatmap}
netVisual_heatmap(object.list[[i]], signaling = pathways.show, color.heatmap = "Reds",title.name = paste(pathways.show, "signaling ",names(object.list)[i]))

netVisual_heatmap2 =function (object, comparison = c(1, 2), measure = c("count", 
    "weight"), signaling = NULL, slot.name = c("netP", "net"), s
    color.use = NULL, color.heatmap = c("Reds"), title.name = NULL, 
    width = NULL, height = NULL, font.size = 8, font.size.title = 10, 
    cluster.rows = FALSE, cluster.cols = FALSE, sources.use = NULL, 
    targets.use = NULL, remove.isolate = FALSE, row.show = NULL, 
    col.show = NULL) 
{
    if (!is.null(measure)) {
        measure <- match.arg(measure)
    }
    slot.name <- match.arg(slot.name)
    if (is.list(object@net[[1]])) {
        message("Do heatmap based on a merged object \n")
        obj1 <- object@net[[comparison[1]]][[measure]]
        obj2 <- object@net[[comparison[2]]][[measure]]
        net.diff <- obj2 - obj1
        if (measure == "count") {
            if (is.null(title.name)) {
                title.name = "Differential number of interactions"
            }
        }
        else if (measure == "weight") {
            if (is.null(title.name)) {
                title.name = "Differential interaction strength"
            }
        }
        legend.name = "Relative values"
    }
    else {
        message("Do heatmap based on a single object \n")
        if (!is.null(signaling)) {
            net.diff <- slot(object, slot.name)$prob[, , signaling]
            if (is.null(title.name)) {
                title.name = paste0(signaling, " signaling network")
            }
            legend.name <- "Communication Prob."
        }
        else if (!is.null(measure)) {
            net.diff <- object@net[[measure]]
            if (measure == "count") {
                if (is.null(title.name)) {
                  title.name = "Number of interactions"
                }
            }
            else if (measure == "weight") {
                if (is.null(title.name)) {
                  title.name = "Interaction strength"
                }
            }
            legend.name <- title.name
        }
    }
    net <- net.diff
    if ((!is.null(sources.use)) | (!is.null(targets.use))) {
        df.net <- reshape2::melt(net, value.name = "value")
        colnames(df.net)[1:2] <- c("source", "target")
        if (!is.null(sources.use)) {
            if (is.numeric(sources.use)) {
                sources.use <- rownames(net.diff)[sources.use]
            }
            df.net <- subset(df.net, source %in% sources.use)
        }
        if (!is.null(targets.use)) {
            if (is.numeric(targets.use)) {
                targets.use <- rownames(net.diff)[targets.use]
            }
            df.net <- subset(df.net, target %in% targets.use)
        }
        cells.level <- rownames(net.diff)
        df.net$source <- factor(df.net$source, levels = cells.level)
        df.net$target <- factor(df.net$target, levels = cells.level)
        df.net$value[is.na(df.net$value)] <- 0
        net <- tapply(df.net[["value"]], list(df.net[["source"]], 
            df.net[["target"]]), sum)
    }
    net[is.na(net)] <- 0
    if (is.null(color.use)) {
        color.use <- scPalette(ncol(net))
    }
    names(color.use) <- colnames(net)
    color.use.row <- color.use
    color.use.col <- color.use
    if (remove.isolate) {
        idx1 <- which(Matrix::rowSums(net) == 0)
        idx2 <- which(Matrix::colSums(net) == 0)
        if (length(idx1) > 0) {
            net <- net[-idx1, ]
            color.use.row <- color.use.row[-idx1]
        }
        if (length(idx2) > 0) {
            net <- net[, -idx2]
            color.use.col <- color.use.col[-idx2]
        }
    }
    mat <- net
    if (!is.null(row.show)) {
        mat <- mat[row.show, ]
        color.use.row <- color.use.row[row.show]
    }
    if (!is.null(col.show)) {
        mat <- mat[, col.show]
        color.use.col <- color.use.col[col.show]
    }
    if (min(mat) < 0) {
        color.heatmap.use = colorRamp3(c(min(mat), 0, max(mat)), 
            c(color.heatmap[1], "#f7f7f7", color.heatmap[2]))
        colorbar.break <- c(round(min(mat, na.rm = T), digits = nchar(sub(".*\\.(0*).*", 
            "\\1", min(mat, na.rm = T))) + 1), 0, round(max(mat, 
            na.rm = T), digits = nchar(sub(".*\\.(0*).*", "\\1", 
            max(mat, na.rm = T))) + 1))
    }
    else {
        if (length(color.heatmap) == 3) {
            color.heatmap.use = colorRamp3(c(0, min(mat), max(mat)), 
                color.heatmap)
        }
        else if (length(color.heatmap) == 2) {
            color.heatmap.use = colorRamp3(c(min(mat), max(mat)), 
                color.heatmap)
        }
        else if (length(color.heatmap) == 1) {
            color.heatmap.use = (grDevices::colorRampPalette((RColorBrewer::brewer.pal(n = 9, 
                name = color.heatmap))))(100)
        }
        colorbar.break <- c(round(min(mat, na.rm = T), digits = nchar(sub(".*\\.(0*).*", 
            "\\1", min(mat, na.rm = T))) + 1), round(max(mat, 
            na.rm = T), digits = nchar(sub(".*\\.(0*).*", "\\1", 
            max(mat, na.rm = T))) + 1))
    }
    df.col <- data.frame(group = colnames(mat))
    rownames(df.col) <- colnames(mat)
    df.row <- data.frame(group = rownames(mat))
    rownames(df.row) <- rownames(mat)
    col_annotation <- HeatmapAnnotation(df = df.col, col = list(group = color.use.col), 
        which = "column", show_legend = FALSE, show_annotation_name = FALSE, 
        simple_anno_size = grid::unit(0.2, "cm"))
    row_annotation <- HeatmapAnnotation(df = df.row, col = list(group = color.use.row), 
        which = "row", show_legend = FALSE, show_annotation_name = FALSE, 
        simple_anno_size = grid::unit(0.2, "cm"))
    ha1 = rowAnnotation(Strength = anno_barplot(rowSums(abs(mat)), ylim = c(0,2.5),
        border = FALSE, gp = gpar(fill = color.use.row, col = color.use.row)), 
        show_annotation_name = F)
    print(range(rowSums(abs(mat))))
    str(range(rowSums(abs(mat))))
    ha2 = HeatmapAnnotation(Strength = anno_barplot(colSums(abs(mat)),ylim = c(0,7.5),
        border = FALSE, gp = gpar(fill = color.use.col, col = color.use.col)), 
        show_annotation_name = FALSE)
    print(range(colSums(abs(mat))))
    if (sum(abs(mat) > 0) == 1) {
        color.heatmap.use = c("white", color.heatmap.use)
    }
    else {
        mat[mat == 0] <- NA
    }
    print(range(rowSums(abs(mat))))
    ht1 = Heatmap(mat, col = color.heatmap.use, na_col = "white", 
        name = legend.name, bottom_annotation = col_annotation, 
        left_annotation = row_annotation, top_annotation = ha2, 
        right_annotation = ha1, cluster_rows = cluster.rows, 
        cluster_columns = cluster.rows, row_names_side = "left", 
        row_names_rot = 0, row_names_gp = gpar(fontsize = font.size), 
        column_names_gp = gpar(fontsize = font.size), column_title = title.name, 
        column_title_gp = gpar(fontsize = font.size.title), column_names_rot = 90, 
        row_title = "Sources (Sender)", row_title_gp = gpar(fontsize = font.size.title), 
        row_title_rot = 90, heatmap_legend_param = list(title_gp = gpar(fontsize = 8, 
            fontface = "plain"), title_position = "leftcenter-rot", 
            border = NA, legend_height = unit(20, "mm"), labels_gp = gpar(fontsize = 8), 
            grid_width = unit(2, "mm")))
    return(ht1)
}

netVisual_heatmap2(object.list[[i]], signaling = pathways.show, color.heatmap = c("#FFFFFF","#591B66"),title.name = paste(pathways.show, "signaling ",names(object.list)[i]))


netVisual_heatmap(object.list[[i]], signaling = pathways.show, color.heatmap = "Reds",title.name = paste(pathways.show, "signaling ",names(object.list)[i]))


pathways.show <- c("MHC-II") 
weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show) # control the edge weights across different datasets


#Heatmap
pdf(file = paste0("../cellchat/",pathways.show,"_Condition.pdf"), width = 15, height =8)
par(mfrow = c(1,2), xpd=TRUE)
for (i in 1:length(object.list)) {
  netVisual_aggregate(object.list[[i]], signaling = pathways.show, layout = "circle", edge.weight.max = weight.max[1], edge.width.max = 10, signaling.name = paste(pathways.show, names(object.list)[i]))
}
par(mfrow = c(1,2), xpd=TRUE)
ht <- list()
for (i in 1:length(object.list)) {
  ht[[i]] <- netVisual_heatmap2(object.list[[i]], signaling = pathways.show, color.heatmap = c("#FFFFFF","#591B66"),title.name = paste(pathways.show, "signaling ",names(object.list)[i]))
}

ComplexHeatmap::draw(ht[[1]] + ht[[2]], ht_gap = unit(0.5, "cm"))
dev.off()

pairLR.CCL <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.CCL[18,]
chord = list()
for (i in 1:length(object.list)) {
  chord[[i]] = netVisual_individual(object.list[[i]], signaling = pathways.show, pairLR.use = LR.show, layout = "chord",edge.weight.max = weight.max[1],edge.width.max = 10,,thresh = 0)
  
}

netVisual_individual(object.list[[2]], signaling = pathways.show, pairLR.use = LR.show, layout = "circle")



netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")

pdf(file = paste0("../cellchat/","CCL24","_Condition.pdf"), width = 10, height =10)
par(mfrow = c(1,2), xpd=TRUE)
netVisual_individual(object.list[[2]], signaling = pathways.show, pairLR.use = LR.show, layout = "circle")
netVisual_individual(object.list[[2]], signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
dev.off()




par(mfrow = c(1,2), xpd=TRUE)
ht <- list()
for (i in 1:length(object.list)) {
  ht[[i]] <- netVisual_heatmap2(object.list[[i]], signaling = pathways.show, color.heatmap = c("#FFFFFF","#591B66"),title.name = paste(pathways.show, "signaling ",names(object.list)[i]))
}

ComplexHeatmap::draw(ht[[1]] + ht[[2]], ht_gap = unit(0.5, "cm"))
dev.off()


```

```{r}
unique(meta$group)


netVisual_diffInteraction(cellchat, weight.scale = T)


#Celltypes circle graph----
pdf(file = "../AECs/Results/cell/Cellchat/PBS_celltypes.pdf", width = 12, height =10 )
par(mfrow = c(3,5), xpd=TRUE, mar=c(1,1,1,1))
mat=cellchat@net$weight
for (i in 1:nrow(mat)) {
  mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
  mat2[i, ] <- mat[i, ]
  netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])}
dev.off()
#circle graph with pathway----
pdf(file = "../AECs/Results/cell/Cellchat/AEC_pathway.pdf", width = 9, height =16 )
par(mfrow = c(5,3), xpd=TRUE, mar=c(1,1,1,1))
for(i in cellchat_AEC@netP$pathways){
netVisual_aggregate(cellchat_AEC, signaling = i, layout = "circle")
}
dev.off()
#Chord graph for pathway----
pdf(file = "../AECs/Results/cell/Cellchat/PBS_Chord.pdf", width = 9, height =16 )
par(mfrow = c(5,3), xpd=TRUE, mar=c(1,1,1,1))
for(i in cellchat_PBS@netP$pathways){
netVisual_aggregate(cellchat_PBS, signaling = i, layout = "chord")
}
dev.off()


weight.max <- getMaxWeight(object.list, attribute = c("idents","count"))
par(mfrow = c(1,2), xpd=TRUE)
for (i in 1:length(object.list)) {
  netVisual_circle(object.list[[i]]@net$count, weight.scale = T, label.edge= F, edge.weight.max = weight.max[2], edge.width.max = 12, title.name = paste0("Number of interactions - ", names(object.list)[i]))
}

par(mfrow = c(1,2), xpd=T)

netVisual_chord_gene(cellchat_PBS, sources.use = c(1:15), targets.use = 12, legend.pos.x = 15)
netVisual_chord_gene(cellchat_AEC, sources.use = c(1:15), targets.use = 12, legend.pos.x = 15)

plot_grid(
netVisual_bubble(cellchat_PBS, sources.use = c(1:16), targets.use = c(2,3,5), remove.isolate = T),
netVisual_bubble(cellchat_AEC, sources.use = c(1:16), targets.use = c(2,3,5), remove.isolate = T))

netVisual_circle(cellchat_PBS@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength" )


netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat_PBS@net$weight
par(mfrow = c(3,4), xpd=TRUE)
for (i in 1:nrow(mat)) {
  mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
  mat2[i, ] <- mat[i, ]
  netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])}

  netVisual_bubble(cellchat_PBS, sources.use = c(1:15), targets.use = c(12),signaling = c("MHC-II"), remove.isolate = FALSE)
cellchat_PBS@netP$pathways
pathways.show <- c("GALECTIN", "TGFb", "APP", "CCL", "MIF", "SPP1", "SEMA4", "CSF", "FN1", "ICAM", "CD52", "CD45", "MHC-II", "CD86", "JAM", "VISFATIN", "COMPLEMENT", "PROS", "CADM", "GRN", "PTPRM", "GAS", "CD80", "THBS", "LAMININ", "PECAM1", "SELPLG", "TNF", "THY1", "ITGAL-ITGB2", "CD22", "CD48", "CD39", "IL4", "ICOS", "CXCL", "IL2", "VCAM", "KIT", "OSM", "SEMA7", "IGF", "NGL", "IL1", "IL6", "ALCAM", "CD6", "BAFF", "CD200", "VEGF", "NECTIN", "IL16", "CD96", "TWEAK", "CD226", "SN", "NRG", "PVR", "ACTIVIN", "PD-L1", "PDL2", "MHC-I", "SELL")


  #c("GALECTIN", "TGFb", "APP", "CCL", "MIF", "SPP1", "SEMA4", "CSF", "FN1", "ICAM", "CD52", "CD45", "MHC-II", "CD86", "JAM", "VISFATIN", "COMPLEMENT", "PROS", "CADM", "GRN", "PTPRM", "GAS", "CD80", "THBS")
 #c("TGFb","MHC-II","CCL","SPP1","CD86","CD80","CXCL","PD-L1")
par(mfrow = c(8,1))
pdf(file ="cellchat_signal.pdf", width = 18, height =40)
b= 0
par(mfrow = c(8,4))
for (a in pathways.show){
for (i in c(cellchat_PBS,cellchat_AEC)) { 
  if (b==0){
    netVisual_chord_cell(i, signaling = a,  title.name = paste0(a, " signaling network in PBS"))
    b = b+1 }
else{
  netVisual_chord_cell(i, signaling = a,  title.name = paste0(a, " signaling network in AEC"))
  b=0
  }
  }}

#netVisual_chord_cell(cellchat_AEC, signaling = "TGFb",  title.name = paste0( "TGFb signaling network in AEC"))}
dev.off()



gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2

```


## SCENIC 
### prepare the Loom Object for SCENIC
```{r}
DATA.loom <- as.loom(DATA, filename = "../Brain_Cd45_HG/pbmc3k.loom")
DATA.loom$close_all()

DATA@meta.data$Subtype_Con <- ""
DATA@meta.data[Cells(DATA), "Subtype_Con"] <- paste0(DATA$Subtypes2,"_", DATA$Condition)

write.csv(DATA@meta.data[,"Subtype_Con", drop=FALSE], file="../SCENIC/CellAnnot_SubtypeCon.csv", quote=FALSE)
```

The calculation was performed in UPPMAX and python. Here is the script for the downstream anaylsis and visualization 
```{r}

scenic_regulon_umap<-read.table("../SCENIC/scenic_umap.txt", row.names = 1)
dim(scenic_regulon_umap)
# 48335     2
scenic_auc_mtx<-read.table("../SCENIC/scenic_auc_mtx.txt", header=TRUE, row.names = 1, check.names = FALSE)
dim(scenic_auc_mtx)
# 48335   424
scenic_RSS_Celltypes<-read.table("../SCENIC/scenic_RegulonSpecificityScores_Celltypes.txt", header=TRUE, row.names = 1, check.names = FALSE, sep = '\t')
dim(scenic_RSS_Celltypes)
# 6 424

```

```{r}
## Make up Seurat object
colnames(scenic_regulon_umap)<-c("UMAP_1", "UMAP_2")
reduction_regulon_umap <- CreateDimReducObject(
  embeddings = as.matrix(scenic_regulon_umap),
  stdev = as.numeric(apply(scenic_regulon_umap, 2, sd)),
  key = "UMAP",
  assay = "RNA"
)
DATA@reductions[["UMAP_regulon"]]<-reduction_regulon_umap
rm(scenic_regulon_umap, reduction_regulon_umap)
DimPlot(DATA, reduction = "UMAP_regulon", group.by="Subtypes2", shuffle = TRUE)
```

```{r}
RSS_matrix<-t(scenic_RSS_Celltypes)
rm(scenic_RSS_Celltypes)
AUC_matrix<-t(scenic_auc_mtx)
rm(scenic_auc_mtx)

regulons<-rownames(RSS_matrix)
identical(regulons, rownames(AUC_matrix))
#TRUE

topreg<-list()
for (i in seq(ncol(RSS_matrix))) {
  topreg[[i]]<-head(regulons[order(RSS_matrix[,i], decreasing = TRUE)], 20)
}
names(topreg)<-colnames(RSS_matrix)

DATA@assays[["AUC"]]<-CreateAssayObject(data=AUC_matrix)

DATA@assays[["AUC"]]@key<-"auc_"
DATA@reductions[["UMAP_regulon"]]@assay.used<-"AUC"

DATA

```
```{r}
DATA@active.assay<-"AUC"
FeaturePlot(DATA, features = feature)
# feature<-"Msx1(+)"

for (i in names(topreg)) {
  for (feature in topreg[[i]]) {
    gene<-sub("\\([+-]\\)$", "", feature, perl=TRUE)
    p_gene<-FeaturePlot(DATA, feature=gene, reduction = "umap.harmony", order=TRUE)
    p_regulon<-FeaturePlot(DATA, feature=feature, reduction = "umap.harmony", order=TRUE)
    ggsave(paste0("../SCENIC/AUC_featurePlot_", i, "_", gene, ".png"), plot_grid(ncol = 2, p_gene, p_regulon), width=8, height=4)
  }
}


pdf("../SCENIC/RidgePlot_Tfec.pdf", width = 18, height = 8)
RidgePlot(DATA, features ="Tfec(+)" )
dev.off()

pdf("../SCENIC/Vln_Tfec.pdf", width = 18, height = 8)
VlnPlot(DATA, features ="Tfec(+)", pt.size = 0.5 )
VlnPlot(DATA, features ="Tfec(+)", pt.size = 0.5,split.by = "Condition" )
dev.off()


saveRDS(DATA, "../SCENIC/SCENIC_obj.rds")
DATA <- readRDS("../SCENIC/SCENIC_obj.rds")
```

```{r}
DATA@active.assay<-"AUC"
pdf("../SCENIC/Vln_Rfx.pdf", width = 18, height = 8)
VlnPlot(DATA, features =c("Rfx1(+)","Tfec(+)"), pt.size = 0.1,cols = color, stack = T,flip = T )
VlnPlot(DATA, features ="Rfx1(+)", pt.size = 0.5,split.by = "Condition" )
VlnPlot(DATA, features ="Rfx1(+)", pt.size = 0 ,cols = color )
VlnPlot(DATA, features ="Rfx1(+)", pt.size = 0,split.by = "Condition")
dev.off()


pdf("../SCENIC/HG_Vln_Rfx.pdf", width = 5.5, height =5.5)
VlnPlot(DATA %>% SetIdent(value = "Celltypes") %>% subset(idents = c("High Granularity Cells")), group.by = "Subtypes",features =c("Rfx1(+)"), pt.size = 0.1,cols = color)
VlnPlot(DATA %>% SetIdent(value = "Celltypes") %>% subset(idents = c("High Granularity Cells")), features ="Rfx1(+)",group.by = "Subtypes", pt.size = 0.5,split.by = "Condition" )
VlnPlot(DATA %>% SetIdent(value = "Celltypes") %>% subset(idents = c("High Granularity Cells")), features ="Rfx1(+)", group.by = "Subtypes",pt.size = 0 ,cols = color )
VlnPlot(DATA %>% SetIdent(value = "Celltypes") %>% subset(idents = c("High Granularity Cells")), features ="Rfx1(+)", group.by = "Subtypes",pt.size = 0,split.by = "Condition")
dev.off()

```